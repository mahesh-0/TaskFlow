/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkersIndexRouteImport } from './routes/workers/index'
import { Route as WorkersSharedWorkerRouteImport } from './routes/workers/shared-worker'
import { Route as WorkersServiceWorkerRouteImport } from './routes/workers/service-worker'
import { Route as WorkersDedicatedWorkerRouteImport } from './routes/workers/dedicated-worker'
import { Route as WorkersAudioWorkletRouteImport } from './routes/workers/audio-worklet'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkersIndexRoute = WorkersIndexRouteImport.update({
  id: '/workers/',
  path: '/workers/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkersSharedWorkerRoute = WorkersSharedWorkerRouteImport.update({
  id: '/workers/shared-worker',
  path: '/workers/shared-worker',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkersServiceWorkerRoute = WorkersServiceWorkerRouteImport.update({
  id: '/workers/service-worker',
  path: '/workers/service-worker',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkersDedicatedWorkerRoute = WorkersDedicatedWorkerRouteImport.update({
  id: '/workers/dedicated-worker',
  path: '/workers/dedicated-worker',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkersAudioWorkletRoute = WorkersAudioWorkletRouteImport.update({
  id: '/workers/audio-worklet',
  path: '/workers/audio-worklet',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workers/audio-worklet': typeof WorkersAudioWorkletRoute
  '/workers/dedicated-worker': typeof WorkersDedicatedWorkerRoute
  '/workers/service-worker': typeof WorkersServiceWorkerRoute
  '/workers/shared-worker': typeof WorkersSharedWorkerRoute
  '/workers': typeof WorkersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workers/audio-worklet': typeof WorkersAudioWorkletRoute
  '/workers/dedicated-worker': typeof WorkersDedicatedWorkerRoute
  '/workers/service-worker': typeof WorkersServiceWorkerRoute
  '/workers/shared-worker': typeof WorkersSharedWorkerRoute
  '/workers': typeof WorkersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/workers/audio-worklet': typeof WorkersAudioWorkletRoute
  '/workers/dedicated-worker': typeof WorkersDedicatedWorkerRoute
  '/workers/service-worker': typeof WorkersServiceWorkerRoute
  '/workers/shared-worker': typeof WorkersSharedWorkerRoute
  '/workers/': typeof WorkersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workers/audio-worklet'
    | '/workers/dedicated-worker'
    | '/workers/service-worker'
    | '/workers/shared-worker'
    | '/workers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workers/audio-worklet'
    | '/workers/dedicated-worker'
    | '/workers/service-worker'
    | '/workers/shared-worker'
    | '/workers'
  id:
    | '__root__'
    | '/'
    | '/workers/audio-worklet'
    | '/workers/dedicated-worker'
    | '/workers/service-worker'
    | '/workers/shared-worker'
    | '/workers/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkersAudioWorkletRoute: typeof WorkersAudioWorkletRoute
  WorkersDedicatedWorkerRoute: typeof WorkersDedicatedWorkerRoute
  WorkersServiceWorkerRoute: typeof WorkersServiceWorkerRoute
  WorkersSharedWorkerRoute: typeof WorkersSharedWorkerRoute
  WorkersIndexRoute: typeof WorkersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workers/': {
      id: '/workers/'
      path: '/workers'
      fullPath: '/workers'
      preLoaderRoute: typeof WorkersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workers/shared-worker': {
      id: '/workers/shared-worker'
      path: '/workers/shared-worker'
      fullPath: '/workers/shared-worker'
      preLoaderRoute: typeof WorkersSharedWorkerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workers/service-worker': {
      id: '/workers/service-worker'
      path: '/workers/service-worker'
      fullPath: '/workers/service-worker'
      preLoaderRoute: typeof WorkersServiceWorkerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workers/dedicated-worker': {
      id: '/workers/dedicated-worker'
      path: '/workers/dedicated-worker'
      fullPath: '/workers/dedicated-worker'
      preLoaderRoute: typeof WorkersDedicatedWorkerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workers/audio-worklet': {
      id: '/workers/audio-worklet'
      path: '/workers/audio-worklet'
      fullPath: '/workers/audio-worklet'
      preLoaderRoute: typeof WorkersAudioWorkletRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkersAudioWorkletRoute: WorkersAudioWorkletRoute,
  WorkersDedicatedWorkerRoute: WorkersDedicatedWorkerRoute,
  WorkersServiceWorkerRoute: WorkersServiceWorkerRoute,
  WorkersSharedWorkerRoute: WorkersSharedWorkerRoute,
  WorkersIndexRoute: WorkersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
